{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/Header/logo.svg","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Td","styled","td","Coin","props","name","ticker","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","Div","div","AccountBalance","buttonText","amount","handleToggleBalance","AppHeader","header","Img","img","H1","h1","Header","src","logo","alt","Component","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","useEffect","length","valueChangeTickerId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5063c55.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Td = styled.td`\n    border: 1px solid #cccccc;\n    width: 25vh;\n`;\n\nexport default function Coin(props) {\n    const handleClick = (event) => {\n        event.preventDefault();\n        props.handleRefresh(props.tickerId);\n    }\n    return (\n        <tr>\n            <Td>{props.name}</Td>\n            <Td>{props.ticker}</Td>\n            <Td>${props.price}</Td>\n            { props.showBalance && <Td>{props.balance}</Td> }\n            <Td>\n                <form action=\"#\" method=\"POST\">\n                    <button onClick={handleClick}>Refresh</button>\n                </form>\n            </Td>\n        </tr>\n    )\n}\n\nCoin.propTypes = {\n    name: PropTypes.string,\n    ticket: PropTypes.string,\n    price: PropTypes.number\n}\n","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n  margin: 50px auto 50px auto;\n  display: inline-block;\n  font-size: 1.4rem;\n`;\n\nexport default function CoinList(props) {\n  return (\n      <Table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Ticker</th>\n          <th>Price</th>\n          { props.showBalance && <th>Balance</th> }\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          props.coinData.map( ({ key, name, ticker, price, balance }) => \n            <Coin key={key}\n                  tickerId={key} \n                  handleRefresh={props.handleRefresh} \n                  name={name} \n                  ticker={ticker} \n                  price={price}\n                  balance={balance}\n                  showBalance={props.showBalance} />\n          )\n        }\n      </tbody>\n  </Table>\n  )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem;\n`;\n\nconst Div = styled.div`\n    float: left;\n`;\n\nexport default function AccountBalance(props) {\n    const buttonText =  props.showBalance? 'Hide Balance' : 'Show Balance'\n    return (\n        <Section>\n            { props.showBalance && <Div>Balance: $ { props.amount }  </Div> }\n            <button onClick={props.handleToggleBalance}>{buttonText}</button>\n        </Section>\n    )\n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg'\nimport styled from 'styled-components';\n\nconst AppHeader = styled.header`\n    background-color: #282c34;\n    min-height: 20vh;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;\n`;\n\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n`;\n\nconst H1 = styled.h1`\n    font-size: 4rem;\n`;\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <AppHeader>\n                <Img src={logo} alt=\"React logo\"></Img>\n                <H1>\n                    Coin Exchange\n                </H1>\n            </AppHeader>\n        )\n    }\n}","import React, { useState, useEffect } from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport Header from './components/Header/Header';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: #144957;\n  color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async() => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes['USD'].price),\n      }\n    });\n    setCoinData(coinPriceData);\n  }\n\n  useEffect(function() {\n    if (coinData.length === 0) {\n      componentDidMount();\n    }\n  });\n\n  const handleRefresh = async (valueChangeTickerId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeTickerId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes['USD'].price);\n\n    const newCoinData = coinData.map(function (values) {\n      let newValues = {...values};\n      if (valueChangeTickerId === values.key) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  const handleToggleBalance = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  return (\n    <Div>\n      <Header/>\n      <AccountBalance amount={balance} \n                      handleToggleBalance={handleToggleBalance}\n                      showBalance={showBalance} />\n      <CoinList coinData={coinData} \n                handleRefresh={handleRefresh} \n                showBalance={showBalance}/>\n    </Div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}